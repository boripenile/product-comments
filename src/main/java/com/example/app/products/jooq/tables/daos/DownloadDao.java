/*
 * This file is generated by jOOQ.
*/
package com.example.app.products.jooq.tables.daos;


import com.example.app.products.jooq.tables.Download;
import com.example.app.products.jooq.tables.records.DownloadRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.types.UInteger;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DownloadDao extends AbstractAsyncVertxDAO<DownloadRecord, com.example.app.products.jooq.tables.pojos.Download, UInteger, Single<List<com.example.app.products.jooq.tables.pojos.Download>>, Single<Optional<com.example.app.products.jooq.tables.pojos.Download>>, Single<Integer>, Single<UInteger>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<DownloadRecord,com.example.app.products.jooq.tables.pojos.Download,UInteger> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DownloadDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(Download.DOWNLOAD, com.example.app.products.jooq.tables.pojos.Download.class, new AsyncRXQueryExecutor<DownloadRecord,com.example.app.products.jooq.tables.pojos.Download,UInteger>(delegate,com.example.app.products.jooq.tables.pojos.Download::new, Download.DOWNLOAD), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UInteger getId(com.example.app.products.jooq.tables.pojos.Download object) {
        return object.getId();
    }

    /**
     * Find records that have <code>product_name IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Download>> findManyByProductName(List<String> values) {
        return findManyByCondition(Download.DOWNLOAD.PRODUCT_NAME.in(values));
    }

    /**
     * Find records that have <code>download_date IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Download>> findManyByDownloadDate(List<Timestamp> values) {
        return findManyByCondition(Download.DOWNLOAD.DOWNLOAD_DATE.in(values));
    }

    /**
     * Find records that have <code>comment_link IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Download>> findManyByCommentLink(List<String> values) {
        return findManyByCondition(Download.DOWNLOAD.COMMENT_LINK.in(values));
    }

    /**
     * Find records that have <code>downloaded_by IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Download>> findManyByDownloadedBy(List<String> values) {
        return findManyByCondition(Download.DOWNLOAD.DOWNLOADED_BY.in(values));
    }

    @Override
    public Single<UInteger> insertReturningPrimary(com.example.app.products.jooq.tables.pojos.Download pojo){
        return Single.<UInteger>error(new UnsupportedOperationException("PK not numeric"));
    }
}
