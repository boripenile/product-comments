/*
 * This file is generated by jOOQ.
*/
package com.example.app.products.jooq.tables.daos;


import com.example.app.products.jooq.tables.Account;
import com.example.app.products.jooq.tables.records.AccountRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountDao extends AbstractAsyncVertxDAO<AccountRecord, com.example.app.products.jooq.tables.pojos.Account, Long, Single<List<com.example.app.products.jooq.tables.pojos.Account>>, Single<Optional<com.example.app.products.jooq.tables.pojos.Account>>, Single<Integer>, Single<Long>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<AccountRecord,com.example.app.products.jooq.tables.pojos.Account,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public AccountDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(Account.ACCOUNT, com.example.app.products.jooq.tables.pojos.Account.class, new AsyncRXQueryExecutor<AccountRecord,com.example.app.products.jooq.tables.pojos.Account,Long>(delegate,com.example.app.products.jooq.tables.pojos.Account::new, Account.ACCOUNT), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.example.app.products.jooq.tables.pojos.Account object) {
        return object.getId();
    }

    /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Account>> findManyByCreated(List<Timestamp> values) {
        return findManyByCondition(Account.ACCOUNT.CREATED.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Account>> findManyByEmail(List<String> values) {
        return findManyByCondition(Account.ACCOUNT.EMAIL.in(values));
    }

    /**
     * Find a unique record that has <code>email = value</code> asynchronously
     */
    public Single<Optional<com.example.app.products.jooq.tables.pojos.Account>> findOneByEmail(String value) {
        return findOneByCondition(Account.ACCOUNT.EMAIL.eq(value));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Account>> findManyByPassword(List<String> values) {
        return findManyByCondition(Account.ACCOUNT.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>role IN (values)</code> asynchronously
     */
    public Single<List<com.example.app.products.jooq.tables.pojos.Account>> findManyByRole(List<String> values) {
        return findManyByCondition(Account.ACCOUNT.ROLE.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((Long)lastId).longValue());
    }
}
